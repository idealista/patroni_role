---

- name: Include main variables
  ansible.builtin.include_vars: "vars/main.yml"
  tags: always
- name: Include system variables
  ansible.builtin.include_vars: "vars/system.yml"
  tags: always
- name: Include OS-specific variables
  ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
  tags: always

- block:

    - name: '[Prepare] Set maintenance variable'
      ansible.builtin.set_fact:
        postgresql_cluster_maintenance: true

    - name: '[Prepare] Get Patroni Cluster Leader Node'
      ansible.builtin.uri:
        url: http://{{ inventory_hostname }}:{{ patroni_restapi_port }}/leader
        status_code: 200
      register: patroni_leader_result
      changed_when: false
      failed_when: false
      check_mode: false

    # Stop, if Patroni is unavailable
    - name: The Patroni cluster is unhealthy
      ansible.builtin.fail:
        msg: "Patroni is unavailable on {{ ansible_hostname }}. Please check the cluster status."
      changed_when: false
      when: patroni_leader_result is undefined or patroni_leader_result.status == -1

    - name: '[Prepare] Add host to group "primary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: primary
        is_master: true
        postgresql_exists: true
      when: hostvars[item]['patroni_leader_result']['status'] == 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false
      check_mode: false

    - name: '[Prepare] Add hosts to group "secondary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: secondary
        is_master: false
        postgresql_exists: true
      when: hostvars[item]['patroni_leader_result']['status'] != 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false
      check_mode: false

    - name: "Print Patroni Cluster info"
      ansible.builtin.debug:
        msg:
          - "Cluster Name: {{ patroni_cluster_name }}"
          - "Cluster Leader: {{ ansible_hostname }}"
      when: inventory_hostname in groups['primary']

    - import_tasks: pre-checks/main.yml
      vars:
        minimal_ansible_version: 2.11.0
        timescale_minimal_pg_version: 12   # if enable_timescale is defined

  when: inventory_hostname in groups['postgres_cluster']
  tags:
    - always

# pg_config_cluster.yml | Configure Postgres Cluster
- block:

    - import_tasks: hostname.yml
      tags: patroni, patroni_install, pip, hostname

    - import_tasks: packages.yml
      tags: patroni, patroni_install, pip, install_packages_from_file, install_packages, install_postgres, install_timescaledb

    - import_tasks: sudo.yml
      tags: patroni, patroni_install, pip, sudo

    - import_tasks: pgpass.yml
      tags: patroni, patroni_install, pgpass

    - import_tasks: patroni_config.yml
      tags: patroni, patroni_install, pgpass

    - import_tasks: postgresql/users.yml
      when: inventory_hostname in groups['primary']

    - import_tasks: postgresql/databases.yml
      when: inventory_hostname in groups['primary']

    - import_tasks: postgresql/schemas.yml
      when: inventory_hostname in groups['primary']

    - import_tasks: postgresql/extensions-install/main.yml
      when: inventory_hostname in groups['postgres_cluster']

    - import_tasks: postgresql/extensions.yml
      when: inventory_hostname in groups['primary']

  when: inventory_hostname in groups['primary'] + groups['secondary']
  become: true
  become_method: sudo
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"

# Perform switchover of the leader for the Patroni cluster "{{ patroni_cluster_name }}"
- block:

    - name: Perform switchover of the leader for the Patroni cluster "{{ patroni_cluster_name }}"
      become: true
      become_user: postgres
      ignore_errors: true
      ansible.builtin.expect:
        command: "patronictl -c /etc/patroni/patroni.yml switchover {{ patroni_cluster_name }}"
        responses:
          (.*)Primary(.*): ""
          (.*)Candidate(.*): "{{ patroni.leader }}"
          (.*)When should the switchover take place(.*): "now"
          (.*)Are you sure you want to switchover cluster(.*): "y"
      register: patronictl_switchover_result
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"
      vars:
        ansible_python_interpreter: /usr/bin/python3
      when:
        - patroni.leader is defined
        - ansible_hostname != patroni.leader

  when: inventory_hostname in groups['primary']
  tags: patroni_switchover

# pg_config_cluster.yml  | Restart patroni leader after config settings if need
- block:

    # Restart Patroni Cluster
    - import_tasks: patroni_restart.yml
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

  when: inventory_hostname in groups['primary']
  tags: patroni_conf

# pg_config_cluster.yml  | Restart patroni replica after config settings if need
- block:

    # Restart Patroni Cluster
    - import_tasks: patroni_restart.yml
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

  when: inventory_hostname in groups['secondary']
  tags: patroni_conf
