---
- name: Include main variables
  ansible.builtin.include_vars: "vars/main.yml"
  tags: always
- name: Include system variables
  ansible.builtin.include_vars: "vars/system.yml"
  tags: always
- name: Include OS-specific variables
  ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
  tags: always

- import_tasks: hostname.yml
  tags: patroni, patroni_install, pip, hostname

- import_tasks: packages.yml
  tags: patroni, patroni_install, pip, install_packages_from_file, install_packages, install_postgres, install_timescaledb

- import_tasks: sudo.yml
  tags: patroni, patroni_install, pip, sudo

- import_tasks: pgpass.yml
  tags: patroni, patroni_install, pgpass

# pip install
- import_tasks: pip.yml
  when:
    - patroni_installation_method == "pip"
    - system_packages is not search("python3-pip")
  tags: patroni, patroni_install, pip

# Patroni install
- block:
    - name: Copy patroni requirements.txt file
      ansible.builtin.copy:
        src: requirements.txt
        dest: /tmp/requirements.txt
        mode: "0640"

    - name: Install setuptools
      ansible.builtin.pip:
        name: setuptools<66.0.0  # https://github.com/pypa/setuptools/issues/3772
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
        PIP_BREAK_SYSTEM_PACKAGES: "1"

    - name: Install requirements
      ansible.builtin.pip:
        requirements: /tmp/requirements.txt
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ pg_bin_dir }}:/usr/local/bin:/usr/bin"
        PIP_BREAK_SYSTEM_PACKAGES: "1"

    - name: Install patroni
      ansible.builtin.pip:
        name: patroni
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
        PIP_BREAK_SYSTEM_PACKAGES: "1"
      when: patroni_install_version == "latest"

    - name: "Install patroni {{ patroni_install_version }}"
      ansible.builtin.pip:
        name: "patroni=={{ patroni_install_version }}"
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
        PIP_BREAK_SYSTEM_PACKAGES: "1"
      when: patroni_install_version != "latest"
  environment: "{{ proxy_env | default({}) }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tags: patroni, patroni_install

# Patroni configure
- name: Create conf directory
  ansible.builtin.file:
    path: /etc/patroni
    state: directory
    owner: postgres
    group: postgres
    mode: "0750"
  tags: patroni, patroni_conf

- name: Generate conf file "/etc/patroni/patroni.yml"
  ansible.builtin.template:
    src: templates/patroni.yml.j2
    dest: /etc/patroni/patroni.yml
    owner: postgres
    group: postgres
    mode: "0640"
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: patroni, patroni_conf

- name: Create patroni log directory
  ansible.builtin.file:
    path: "{{ patroni_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0750"
  when: patroni_log_destination == 'logfile'
  tags: patroni, patroni_conf

- name: Enable log rotation with logrotate
  ansible.builtin.copy:
    content: |
      /var/log/patroni/patroni.log {
             daily
             rotate 14
             copytruncate
             delaycompress
             compress
             notifempty
             missingok
             su root root
      }
    dest: /etc/logrotate.d/patroni
    mode: "0640"
  tags: patroni_logrotate, patroni

- block:  # for add_pgnode.yml
    - name: Fetch patroni.yml conf file from master
      run_once: true
      ansible.builtin.fetch:
        src: /etc/patroni/patroni.yml
        dest: files/patroni.yml
        validate_checksum: true
        flat: true
      delegate_to: "{{ groups.master[0] }}"

    - name: Copy patroni.yml conf file to replica
      ansible.builtin.copy:
        src: files/patroni.yml
        dest: /etc/patroni/patroni.yml
        owner: postgres
        group: postgres
        mode: "0640"

    - name: Remove patroni.yml conf files from localhost
      become: false
      run_once: true
      ansible.builtin.file:
        path: files/patroni.yml
        state: absent
      delegate_to: localhost

    - name: Prepare patroni.yml conf file (replace "name","listen","connect_address")
      ansible.builtin.lineinfile:
        path: /etc/patroni/patroni.yml
        regexp: "{{ patroni_config_without_cluster_vip_item.regexp }}"
        line: "{{ patroni_config_without_cluster_vip_item.line }}"
        backrefs: true
      loop:
        - regexp: '^name:'
          line: 'name: {{ ansible_hostname }}'
        - regexp: '^  listen: .*:{{ patroni_restapi_port }}$'
          line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ patroni_restapi_port }}'
        - regexp: '^  connect_address: .*:{{ patroni_restapi_port }}$'
          line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ patroni_restapi_port }}'
        - regexp: '^  listen: ((?!{{ patroni_restapi_port }}).)*$'
          line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }},127.0.0.1:{{ postgresql_port }}'
        - regexp: '^  connect_address: ((?!{{ patroni_restapi_port }}).)*$'
          line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ postgresql_port }}'
      loop_control:
        loop_var: patroni_config_without_cluster_vip_item
        label: "{{ patroni_config_without_cluster_vip_item.line }}"
      when: with_haproxy_load_balancing|bool or pgbouncer_install|bool or (cluster_vip is not defined or cluster_vip | length < 1)

    - name: Prepare patroni.yml conf file (replace "name","listen","connect_address")
      ansible.builtin.lineinfile:
        path: /etc/patroni/patroni.yml
        regexp: "{{ patroni_config_with_cluster_vip_item.regexp }}"
        line: "{{ patroni_config_with_cluster_vip_item.line }}"
        backrefs: true
      loop:
        - regexp: '^name:'
          line: 'name: {{ ansible_hostname }}'
        - regexp: '^  listen: .*:{{ patroni_restapi_port }}$'
          line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ patroni_restapi_port }}'
        - regexp: '^  connect_address: .*:{{ patroni_restapi_port }}$'
          line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ patroni_restapi_port }}'
        - regexp: '^  listen: ((?!{{ patroni_restapi_port }}).)*$'
          line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }},{{ cluster_vip }},127.0.0.1:{{ postgresql_port }}'
        - regexp: '^  connect_address: ((?!{{ patroni_restapi_port }}).)*$'
          line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ postgresql_port }}'
      loop_control:
        loop_var: patroni_config_with_cluster_vip_item
        label: "{{ patroni_config_with_cluster_vip_item.line }}"
      when: not with_haproxy_load_balancing|bool and not pgbouncer_install|bool and (cluster_vip is defined and cluster_vip | length > 0)
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: patroni, patroni_conf

- name: Copy systemd service file "/etc/systemd/system/patroni.service"
  ansible.builtin.template:
    src: templates/patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    owner: postgres
    group: postgres
    mode: "0644"
  tags: patroni, patroni_conf, patroni_service

- name: Prepare PostgreSQL | create statistics directory (if not already exists)
  ansible.builtin.file:
    path: "{{ postgresql_stats_temp_directory_path }}"
    state: directory
    mode: "01777"
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
    - postgresql_version is version('14', '<=')
  tags: patroni, pgsql_stats_tmp

- name: Prepare PostgreSQL | mount the statistics directory in memory (tmpfs)
  mount:
    path: "{{ postgresql_stats_temp_directory_path }}"
    src: tmpfs
    fstype: tmpfs
    opts: "size={{ postgresql_stats_temp_directory_size }},uid=postgres,gid=postgres"
    state: mounted
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
    - postgresql_version is version('14', '<=')
  tags: patroni, pgsql_stats_tmp

- name: Prepare PostgreSQL | make sure the postgresql log directory "{{ postgresql_log_dir }}" exists
  ansible.builtin.file:
    path: "{{ postgresql_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0700"
  tags: patroni

- name: Prepare PostgreSQL | make sure the custom WAL directory "{{ postgresql_wal_dir }}" exists
  ansible.builtin.file:
    path: "{{ postgresql_wal_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0700"
  when: postgresql_wal_dir is defined and postgresql_wal_dir | length > 0
  tags: patroni, custom_wal_dir

- block:  # wheh postgresql NOT exists or PITR
    - name: Prepare PostgreSQL | make sure PostgreSQL data directory "{{ postgresql_data_dir }}" exists
      ansible.builtin.file:
        path: "{{ postgresql_data_dir }}"
        owner: postgres
        group: postgres
        state: directory
        mode: "0700"

    # for Debian based distros only
    # patroni bootstrap failure is possible if the postgresql config files are missing
    - name: Prepare PostgreSQL | make sure the postgresql config files exists
      ansible.builtin.stat:
        path: "{{ postgresql_conf_dir }}/postgresql.conf"
      register: postgresql_conf_file
      when: ansible_os_family == "Debian" and
            postgresql_packages|join(" ") is not search("postgrespro")

    - name: Prepare PostgreSQL | generate default postgresql config files
      become: true
      become_user: postgres
      ansible.builtin.command: >
        /usr/bin/pg_createcluster {{ postgresql_version }} {{ postgresql_cluster_name }}
        -d {{ postgresql_data_dir }}
        -p {{ postgresql_port }}
        -e {{ postgresql_encoding }}
        --locale {{ postgresql_locale }}
      register: pg_createcluster_result
      failed_when: pg_createcluster_result.rc != 0
      when: (ansible_os_family == "Debian" and
            postgresql_packages|join(" ") is not search("postgrespro")) and
            not postgresql_conf_file.stat.exists

    - name: Prepare PostgreSQL | make sure the data directory "{{ postgresql_data_dir }}" is empty
      ansible.builtin.file:
        path: "{{ postgresql_data_dir }}"
        state: "{{ item }}"
        owner: postgres
        group: postgres
        mode: "0700"
      loop:
        - absent
        - directory
      when: (is_master | bool and patroni_cluster_bootstrap_method != "pgbackrest")
            or (not is_master | bool and 'pgbackrest' not in patroni_create_replica_methods)  # --delta restore

    - name: Prepare PostgreSQL | make sure the custom WAL directory "{{ postgresql_wal_dir }}" is empty
      ansible.builtin.file:
        path: "{{ postgresql_wal_dir }}"
        state: "{{ item }}"
        owner: postgres
        group: postgres
        mode: "0700"
      loop:
        - absent
        - directory
      when: (postgresql_wal_dir is defined and postgresql_wal_dir | length > 0) and
            ((is_master | bool and patroni_cluster_bootstrap_method != "pgbackrest")
              or (not is_master | bool and 'pgbackrest' not in patroni_create_replica_methods))  # --delta restore
  when: not postgresql_exists | bool or patroni_cluster_bootstrap_method != "initdb"
  tags: patroni, point_in_time_recovery

- block:  # when postgresql exists

    - block:  # for master only
        - name: Prepare PostgreSQL | check PostgreSQL is started on Master
          become: true
          become_user: postgres
          ansible.builtin.command: "{{ pg_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
          register: pg_ctl_status_result
          changed_when: false
          failed_when:
            - pg_ctl_status_result.rc != 0
            - pg_ctl_status_result.rc != 3

        # "Debian"
        - name: Prepare PostgreSQL | start PostgreSQL on Master
          become: true
          become_user: postgres
          ansible.builtin.command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} start"
          register: pg_start_on_master
          when: pg_ctl_status_result.rc == 3 and
                (ansible_os_family == "Debian" and postgresql_packages|join(" ") is not search("postgrespro"))

          # "RedHat" or PostgresPro
        - name: Prepare PostgreSQL | start PostgreSQL on Master
          become: true
          become_user: postgres
          ansible.builtin.command: "{{ pg_bin_dir }}/pg_ctl start -D {{ postgresql_data_dir }}"
          register: pg_start_on_master
          when: pg_ctl_status_result.rc == 3 and
                (ansible_os_family == "RedHat" or postgresql_packages|join(" ") is search("postgrespro"))

        - name: Prepare PostgreSQL | check PostgreSQL is accepting connections
          become: true
          become_user: postgres
          ansible.builtin.command: "{{ pg_bin_dir }}/pg_isready -p {{ postgresql_port }}"
          register: pg_isready_result
          until: pg_isready_result.rc == 0
          retries: 30
          delay: 10
          changed_when: false

        - name: Prepare PostgreSQL | generate pg_hba.conf on Master
          ansible.builtin.template:
            src: templates/pg_hba.conf.j2
            dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
            owner: postgres
            group: postgres
            mode: "0640"
          register: generate_pg_hba

        - name: Prepare PostgreSQL | reload for apply the pg_hba.conf
          become: true
          become_user: postgres
          ansible.builtin.command: "{{ pg_bin_dir }}/pg_ctl reload -D {{ postgresql_data_dir }}"
          when: generate_pg_hba.changed

        - name: Prepare PostgreSQL | make sure the user "{{ patroni_superuser_username }}" are present, and password does not differ from the specified
          postgresql_user:
            db: postgres
            name: "{{ patroni_superuser_username }}"
            password: "{{ patroni_superuser_password }}"
            encrypted: true
            role_attr_flags: "SUPERUSER"
            login_unix_socket: "{{ postgresql_unix_socket_dir }}"
            port: "{{ postgresql_port }}"
            state: present
          become: true
          become_user: postgres

        - name: Prepare PostgreSQL | make sure the user "{{ patroni_replication_username }}" are present, and password does not differ from the specified
          postgresql_user:
            db: postgres
            name: "{{ patroni_replication_username }}"
            password: "{{ patroni_replication_password }}"
            encrypted: true
            role_attr_flags: "LOGIN,REPLICATION"
            login_unix_socket: "{{ postgresql_unix_socket_dir }}"
            port: "{{ postgresql_port }}"
            state: present
          become: true
          become_user: postgres
      when: is_master | bool

    - name: Prepare PostgreSQL | check PostgreSQL is started
      become: true
      become_user: postgres
      ansible.builtin.command: "{{ pg_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
      register: pg_ctl_status_result
      changed_when: false
      failed_when:
        - pg_ctl_status_result.rc != 0
        - pg_ctl_status_result.rc != 3

    - name: Prepare PostgreSQL | waiting for CHECKPOINT to complete before stopping postgresql
      become: true
      become_user: postgres
      ansible.builtin.command: >
        {{ pg_bin_dir }}/psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc "CHECKPOINT"
      register: checkpoint_result
      until: checkpoint_result.rc == 0
      retries: 300
      delay: 10
      when: pg_ctl_status_result.rc == 0

      # "Debian"
    - name: Prepare PostgreSQL | stop PostgreSQL (will be managed by patroni)
      become: true
      become_user: postgres
      ansible.builtin.command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} stop -m fast -- -w -t 600"
      when: (checkpoint_result.rc is defined and checkpoint_result.rc == 0) and
            (ansible_os_family == "Debian" and postgresql_packages|join(" ") is not search("postgrespro"))

      # "RedHat" or PostgresPro
    - name: Prepare PostgreSQL | stop PostgreSQL (will be managed by patroni)
      become: true
      become_user: postgres
      ansible.builtin.command: "{{ pg_bin_dir }}/pg_ctl stop -D {{ postgresql_data_dir }} -m fast -w -t 600"
      when: (checkpoint_result.rc is defined and checkpoint_result.rc == 0) and
            (ansible_os_family == "RedHat" or postgresql_packages|join(" ") is search("postgrespro"))

    - name: Prepare PostgreSQL | check PostgreSQL is stopped
      become: true
      become_user: postgres
      ansible.builtin.command: "{{ pg_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
      register: pg_ctl_stop_result
      failed_when: pg_ctl_stop_result.rc != 3
      changed_when: false

  when: postgresql_exists | bool and patroni_cluster_bootstrap_method == "initdb"
  tags: patroni, patroni_start_master

- block:  # start patroni on master
    - name: Start patroni service on the Master server
      ansible.builtin.systemd:
        daemon_reload: true
        name: patroni
        state: restarted
        enabled: true

    - name: "Wait for port {{ patroni_restapi_port }} to become open on the host"
      ansible.builtin.wait_for:
        port: "{{ patroni_restapi_port }}"
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: false
      tags: patroni, patroni_start_master, point_in_time_recovery

    - name: Perform switchover of the leader for the Patroni cluster "{{ patroni_cluster_name }}"
      become: true
      become_user: postgres
      ignore_errors: true
      ansible.builtin.expect:
        command: "patronictl -c /etc/patroni/patroni.yml switchover {{ patroni_cluster_name }}"
        responses:
          (.*)Primary(.*): ""
          (.*)Candidate(.*): "{{ ansible_hostname }}"
          (.*)When should the switchover take place(.*): "now"
          (.*)Are you sure you want to switchover cluster(.*): "y"
      register: patronictl_switchover_result
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"
      vars:
        ansible_python_interpreter: /usr/bin/python3
      when: postgresql_exists | bool

      # for WAL-G (custom bootstrap)
    - name: Wait for PostgreSQL Recovery to complete (WAL apply)
      become: true
      become_user: postgres
      ansible.builtin.command: >-
        {{ pg_bin_dir }}/psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -tAXc
        "select pg_is_in_recovery()"
      register: pg_is_in_recovery
      until: pg_is_in_recovery.stdout == "f"
      retries: 1200  # timeout 10 hours
      delay: 30
      changed_when: false
      failed_when: false
      when: patroni_cluster_bootstrap_method == "wal-g"

    - name: Check PostgreSQL is started and accepting connections on Master
      become: true
      become_user: postgres
      ansible.builtin.command: "{{ pg_bin_dir }}/pg_isready -p {{ postgresql_port }}"
      register: pg_isready_result
      until: pg_isready_result.rc == 0
      retries: 1000
      delay: 30
      changed_when: false

    - name: Wait for the cluster to initialize (master is the leader with the lock)
      ansible.builtin.uri:
        url: "http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:{{ patroni_restapi_port }}/leader"
        status_code: 200
      register: result
      until: result.status == 200
      retries: 10
      delay: 2
      when:
        - (patroni_standby_cluster.host is not defined or patroni_standby_cluster.host | length < 1)
        - not ansible_check_mode
  when: is_master | bool
  tags: patroni, patroni_start_master, point_in_time_recovery

- block:  # pg_hba (using a templates/pg_hba.conf.j2)
    - name: Prepare PostgreSQL | generate pg_hba.conf
      ansible.builtin.template:
        src: templates/pg_hba.conf.j2
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: "0640"
      register: generate_pg_hba
      when: is_master | bool or
            ((not is_master | bool and postgresql_conf_dir != postgresql_data_dir)
            or postgresql_exists | bool)

    - name: Prepare PostgreSQL | reload for apply the pg_hba.conf
      become: true
      become_user: postgres
      ansible.builtin.command: "{{ pg_bin_dir }}/pg_ctl reload -D {{ postgresql_data_dir }}"
      register: pg_ctl_reload_result
      changed_when: pg_ctl_reload_result.rc == 0
      failed_when: false  # exec 'reload' on all running postgres (to re-run with --tag pg_hba).
      when: generate_pg_hba is changed
      # tags: molecule-idempotence-notest

  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: patroni, pg_hba, pg_hba_generate

- block:  # for add_pgnode.yml
    - name: Prepare PostgreSQL | fetch pg_hba.conf file from master
      run_once: true
      ansible.builtin.fetch:
        src: "{{ postgresql_conf_dir }}/pg_hba.conf"
        dest: files/pg_hba.conf
        validate_checksum: true
        flat: true
      delegate_to: "{{ groups.master[0] }}"

    - name: Prepare PostgreSQL | copy pg_hba.conf file to replica
      ansible.builtin.copy:
        src: files/pg_hba.conf
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: "0640"
  when: existing_pgcluster is defined and existing_pgcluster|bool
        and postgresql_conf_dir != postgresql_data_dir
  tags: patroni, pg_hba, pg_hba_generate

- block:  # reset data dir on replica

    - name: Prepare PostgreSQL | make sure the data directory "{{ postgresql_data_dir }}" is empty
      ansible.builtin.file:
        path: "{{ postgresql_data_dir }}"
        state: "{{ item }}"
        owner: postgres
        group: postgres
        mode: "0700"
      loop:
        - absent
        - directory

    - name: Inicializar el nodo como parte del clúster
      become: true
      become_user: postgres
      ansible.builtin.shell: |
        export PGPASSWORD={{ patroni_replication_password }}
        pg_basebackup -h "{{ groups.master[0] }}" -D {{ postgresql_data_dir }} -U {{ patroni_replication_username }} -vP
      no_log: true

  when: not is_master | bool
        and replica_reset_data is defined and replica_reset_data|bool
        and postgresql_exists | bool and patroni_cluster_bootstrap_method == "initdb"
  tags: patroni, patroni_start_replica, point_in_time_recovery

- block:  # start patroni on replica
    - name: Start patroni service on Replica servers
      ansible.builtin.systemd:
        daemon_reload: true
        name: patroni
        state: restarted
        enabled: true

    - name: "Wait for port {{ patroni_restapi_port }} to become open on the host"
      ansible.builtin.wait_for:
        port: "{{ patroni_restapi_port }}"
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: false

    - name: Check that the patroni is healthy on the replica server
      ansible.builtin.uri:
        url: "http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:{{ patroni_restapi_port }}/health"
        status_code: 200
      register: replica_result
      until: replica_result.status == 200
      retries: 1200  # timeout 10 hours
      delay: 30
      when: not ansible_check_mode
  when: not is_master | bool
  tags: patroni, patroni_start_replica, point_in_time_recovery

# create symlink pg_xlog/pg_wal to custom WAL dir
- import_tasks: custom_wal_dir.yml
  when: postgresql_wal_dir is defined and postgresql_wal_dir | length > 0
  tags: patroni, custom_wal_dir, point_in_time_recovery

# disable postgresql from autostart
- block:  # "Debian"
    - name: Turning off postgresql autostart from config "start.conf" (will be managed by patroni)
      ansible.builtin.copy:
        dest: "{{ postgresql_conf_dir }}/start.conf"
        content: "manual"
        owner: postgres
        group: postgres
        mode: "0644"

    - name: Disable "postgresql@{{ postgresql_version }}-{{ postgresql_cluster_name }}" service
      ansible.builtin.systemd:
        name: "postgresql@{{ postgresql_version }}-{{ postgresql_cluster_name }}"
        enabled: false
        daemon_reload: true
  when: ansible_os_family == "Debian" and
        postgresql_packages|join(" ") is not search("postgrespro")
  tags: patroni, postgresql_disable

# PATRONICTL_CONFIG_FILE (patroni v1.6.1 and higher)
- name: Add PATRONICTL_CONFIG_FILE environment variable into /etc/environment
  ansible.builtin.lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^PATRONICTL_CONFIG_FILE"
    line: "PATRONICTL_CONFIG_FILE=/etc/patroni/patroni.yml"
    owner: root
    group: root
    mode: '0644'
  register: patroni_config_file_result
  failed_when: patroni_config_file_result.failed
  tags: patroni, patroni_env

- name: pre-checks patroni
  import_tasks: "pre-checks/patroni.yml"
  tags: patroni, patroni_install, patroni_config

...
